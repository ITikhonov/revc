		Utilities

=utils
-def mangle_char(c):
-	if x not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_':
-		return '{:02x}'.format(ord(c))
-	return None

-def mangle_name(name):
-	v=[]
-	m=[]
-	if name[0] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_':
-		v.append('_')
-		m.append(mangle_char(name[0]))
-	else:
-		v.append(name[0])

-	for x in name[1:]:
-		if x not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_':
-			v.append('_')
-			m.append(mangle_char(x))
-		else:
-			v.append(x)
-	return '{0}__{1}'.format(''.join(v),''.join(m)) if m else name

-def resolve_type(t,name=None):
-	if name: name=mangle_name(name)
-	c=[]
-	for x in t.c:
-		if isinstance(x,list):
-			if not name: name=''
-			f=func_decl('(*'+name+')',x[0],x[1:],mangle=False)
-			name=None
-			c.append(f)
-		elif x.startswith('[') and name:
-			c.append(name)
-			name=None
-			c.append(x)
-		else: c.append(x)
-	if name: c.append(name)
-	return ' '.join(c)

-def func_decl(name,rtype,args,mangle=True):
-	if mangle:
-		name=mangle_name(name)
-	rtype=resolve_type(rtype)
-	args=[resolve_type(args[i+1],args[i]) for i in range(0,len(args),2)]
-	return "%s %s(%s)"%(rtype,name,','.join(args))


		Compiler

=compiler
-comps={}

-def c_include(t,c):
-	_,files=t
-	for x in files:
-		c.code.append('#include <{0}>\n'.format(x))
-	c.nosemi=True
-comps['include']=c_include

-def c_func(t,c):
-	_,name,args,body=t
-	c.code.append(func_decl(name,args[0],args[1:]))
-	c.code.append('{')
-	compiler(body,c)
-	c.code.append('}')
-comps['func']=c_func

-def c_struct(t,c):
-	_,name,decl=t
-	c.code.append('struct ')
-	c.code.append(mangle_name(name))
-	c.code.append('{')
-	for i in range(0,len(decl),2):
-		c.code.append(resolve_type(decl[i+1],decl[i]))
-		c.code.append(';')
-	c.code.append('}');
-comps['struct']=c_struct

-def c_funcptr(t,c):
-	_,name,decl=t
-	c.code.append(func_decl('(*'+mangle_name(name)+')',decl[0],decl[1:],False))
-comps['funcptr']=c_funcptr

-def c_cast(t,c):
-	_,value,t=t
-	c.code.append('((')
-	c.code.append(resolve_type(t))
-	c.code.append(')')
-	compile(value,c)
-	c.code.append(')')
-comps['cast']=c_cast

-def c_var(t,c):
-	_,t,name=t
-	c.code.append(resolve_type(t,name))
-comps['var']=c_var

-def c_assignvar(t,c):
-	_,vt,name,value=t
-	c.code.append(resolve_type(vt,name))
-	c.code.append('=')
-	compile(value,c)
-comps['assignvar']=c_assignvar


-def c_funcall(t,c):
-	_,name,args=t
-	compile(name,c)
-	c.code.append('(')
-	cargs=[]
-	for x in args:
-		compile(x,c)
-		c.code.append(',')
-	if args: c.code.pop()
-	c.code.append(')')
-comps['funcall']=c_funcall


-def c_pfield(t,c):
-	_,f,s=t
-	compile(f,c)
-	c.code.append('->')
-	compile(s,c)
-comps['<-']=c_pfield

-def c_field(t,c):
-	_,f,s=t
-	compile(f,c)
-	c.code.append('.')
-	compile(s,c)
-comps['.']=c_field


-def c_for(t,c):
-	_,pre,body=t
-	c.code.append('for(')
-	if len(pre)==3: compile(pre[0],c)
-	c.code.append(';')
-	if len(pre)==3: compile(pre[1],c)
-	elif len(pre)==2: compile(pre[0],c)
-	c.code.append(';')
-	if len(pre)>0: compile(pre[-1],c)
-	c.code.append(') {')
-	compiler(body,c)
-	c.code.append('}')
-comps['for']=c_for

-def c_ifelse(t,c):
-	_,cond,true,false=t
-	c.code.append('if(')
-	compile(cond,c)
-	c.code.append(') {')
-	compiler(true,c)
-	c.code.append('} else {')
-	compiler(false,c)
-	c.code.append('}')
-comps['ifelse']=c_ifelse

-def c_if(t,c):
-	_,cond,true=t
-	c.code.append('if(')
-	compile(cond,c)
-	c.code.append(') {')
-	compiler(true,c)
-	c.code.append('}')
-comps['if']=c_if

-def c_arrsub(t,c):
-	_,i,a=t
-	compile(i,c)
-	c.code.append('[')
-	compile(a,c)
-	c.code.append(']')
-comps['[]']=c_arrsub

-def c_binop(t,c):
-	op,a,b=t
-	c.code.append('(')
-	compile(a,c)
-	c.code.append(op)
-	compile(b,c)
-	c.code.append(')')
-for x in '+ - * / < > >= <= == ='.split():
-	comps[x]=c_binop

-def c_infix(t,c):
-	op,a=t
-	compile(a,c)
-	c.code.append(op)
-for x in '-- ++'.split():
-	comps[x]=c_infix

-def c_ptr(t,c):
-	_,v=t
-	c.code.append('(&')
-	compile(v,c)
-	c.code.append(')')
-comps['&']=c_ptr

-def c_return(t,c):
-	_,a=t
-	c.code.append('return ')
-	compile(a,c)
-comps['return']=c_return

-def compile(expr,c):
-	if type(expr)==tuple:
-		comps[expr[0]](expr,c)
-	elif type(expr)==list:
-		raise Exception('Hey, list!',expr)
-	elif expr.startswith('"'):
-		c.code.append(expr)
-	elif expr.isdigit() or (expr.startswith('-') and expr[1:].isdigit()):
-		c.code.append(expr)
-	else:
-		c.code.append(mangle_name(expr))

-def compiler(tree,c):
-	for x in tree:
-		compile(x,c)
-		if c.nosemi:
-			c.nosemi=False
-		else:
-			c.code.append(';')
-	return c


		Macros

=macros
-macros={}

Types

=types
-Type='Type'

-def macro_void(c,t):
-	c.stack.append(O(i=Type,c=['void']))
-macros['void']=macro_void

-def macro_char(c,t):
-	c.stack.append(O(i=Type,c=['char']))
-macros['char']=macro_char

-def macro_int(c,t):
-	c.stack.append(O(i=Type,c=['int']))
-macros['int']=macro_int

-def macro_asterisk(c,t):
-	t=c.stack.pop()
-	if isinstance(t,O):
-		t.c.append('*')
-		c.stack.append(t)
-	elif isinstance(t,list):
-		c.stack.append(O(i=Type,c=[t]))
-	else:
-		macro_binop(c,t)
-macros['*']=macro_asterisk


-def macro_include(c,t):
-	t=c.stack.pop()
-	c.stack.append(('include',t))
-macros['include']=macro_include

-def macro_struct(c,t):
-	t=c.stack.pop()
-	if type(t)==str:
-		c.stack.append(O(i=Type,c=['struct '+mangle_name(t)]))
-	elif type(t)==list:
-		name=c.stack.pop()
-		c.stack.append(('struct',name,t))
-	else:
-		raise Exception('struct only follows name or list, but got {0} of type {1}'.format(t,type(t)))
-macros['struct']=macro_struct


-def macro_array(c,t):
-	p=c.stack.pop()
-	if getattr(p,'i',None)==Type:
-		p.c.append('[]')
-		c.stack.append(p)
-	elif type(p)==str and p.isdigit():
-		n=int(p)
-		t=c.stack.pop()
-		t.c.append('[%u]'%n)
-		c.stack.append(t)
-	else:
-		c.stack.append(p)
-		macro_binop(c,t)
-macros['[]']=macro_array


-def macro_var(c,t):
-	t=c.stack.pop()
-	n=c.stack.pop()
-	c.stack.append(('var',t,n))
-macros['var']=macro_var

-def macro_assign(c,t):
-	t=c.stack.pop()
-	if getattr(t,'i',None)==Type:
-		n=c.stack.pop()
-		v=c.stack.pop()
-		c.stack.append(('assignvar',t,n,v))
-	else:
-		v=c.stack.pop()
-		c.stack.append(('=',t,v))
-macros['=']=macro_assign

-def macro_binop(c,t):
-	a=c.stack.pop()
-	b=c.stack.pop()
-	c.stack.append((t,b,a))
-for x in '< > + - / == >= <= <- . cast if for'.split():
-	macros[x]=macro_binop

-def macro_triop(c,t):
-	a=c.stack.pop()
-	b=c.stack.pop()
-	d=c.stack.pop()
-	c.stack.append((t,d,b,a))
-for x in 'ifelse func'.split():
-	macros[x]=macro_triop

-def macro_infix(c,t):
-	c.stack.append((t,c.stack.pop()))
-for x in '& return ++'.split():
-	macros[x]=macro_infix

-def macro_block(c,t):
-	pp(c.stack,stream=stderr)
-	b=[]
-	while c.stack[-1]!='[':
-		b.insert(0,c.stack.pop())
-	c.stack.pop()
-	c.stack.append(b)
-macros[']']=macro_block


-def macro_call(c,t):
-	name=c.stack.pop()
-	arity=int(t[1:])

-	args=[]
-	for i in range(arity):
-		args.insert(0,c.stack.pop())
-	c.stack.append(('funcall',name,args))
-macros['call']=macro_call


=>example.revc
-[ unistd.h ] include
-[ stdio.h ] include

-handler [ void arg int ] * var
-sub [ subf int ] struct
-conn [
-	fd int
-	reg int
-	subc sub struct
-] struct
-skip-header [
-char * 
-	c	conn struct *
-	buf-fer	char 1024 []
-]
-[ 
-	c fd <- buf-fer 1024 read /3 r int =
-	[ 0 i int = i r < i ++ ]
-	[
-		i buf-fer [] "\r\n\r\n" c reg <- [] ==
-		[ c reg <- ++ ]
-		[ 0 c reg <- = ] ifelse
-
-		c reg <- 4 == [ buf-fer i 1 + + return ] if
-	] for
-
-	1 c subc subf . <- =
-	0 return
-] func

=>fib.revc
-fib [ int  i int ]
-[
-	i 0 == [ i return ] if
-	i 1 == [ i return ] if
-	i 1 - fib /1 i 2 - fib /1 + return
-] func

-main [ int  argc int argv char * [] ]
-[
-	"fib: %u\n" 1 argv [] atoi/1 fib/1 printf/2
-	0 return
-] func



=parse-one
-def parse_one(c,text):
-	if text.startswith('"'):
-		t,rest=text[1:].split('"',1)
-		c.stack.append('"'+t+'"')
-		return rest
-	s=text.split(None,1)
-	t,rest=s if len(s)==2 else (s[0],'')
-	if t in c.macro: c.macro[t](c,t)
-	elif t.startswith('/'):
-		macro_call(c,t)
-	else: c.stack.append(t)
-	return rest


=context
-class context:
-	stack=[]
-	macro=macros
-	nosemi=False

=parse
-def parse(text):
-	c=context()
-	while text:
-		try: text=parse_one(c,text)
-		except:
-			print >>stderr,'tripped holding',c.stack
-			print >>stderr,'on',repr(text[:20])
-			raise
-	return c


=>revc.py
-from pprint import pprint as pp

-class O:
-	def __init__(_,**kw):
-		for x,y in kw.iteritems():
-			setattr(_,x,y)

-	def __repr__(_):
-		return 'O('+(', '.join([("%r=%r"%x) for x in _.__dict__.items()]))+')'

>utils
>compiler

>macros
>types
>parse-one
>parse
>context


-if __name__=='__main__':
-	from sys import stderr,argv
-	c=parse(open(argv[1]).read())
-	pp(c.stack,stream=stderr,indent=8)
-	c.code=[]
-	try: c=compiler(c.stack,c)
-	except:
-		print >>stderr,c.code
-		raise
-	try:
-		print ''.join(c.code)
-	except:
-		print >>stderr,'tripped on'
-		pp(c.code,stream=stderr)
-		raise

